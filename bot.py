import os
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiohttp import ClientSession, ClientError
from dotenv import load_dotenv
from db import Database
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
OMDB_API_KEY = os.getenv("OMDB_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º timedelta
class Cache:
    def __init__(self, expiration: timedelta = timedelta(minutes=10)):
        self.cache = {}
        self.expiration = expiration

    def has(self, query):
        if query in self.cache:
            timestamp, data = self.cache[query]
            if datetime.now() - timestamp < self.expiration:
                return True
            else:
                del self.cache[query]  # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
        return False

    def get(self, query):
        return self.cache[query][1] if self.has(query) else None

    def set(self, query, data):
        self.cache[query] = (datetime.now(), data)

cache = Cache()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ
async def fetch_movie_data(query: str) -> dict:
    if cache.has(query):
        return cache.get(query)

    async with ClientSession() as session:
        try:
            async with session.get(f'http://www.omdbapi.com/?t={query}&apikey={OMDB_API_KEY}&plot=full') as response:
                response.raise_for_status()
                data = await response.json()

                if data.get("Response") == "True":
                    cache.set(query, data)
                    return data
                else:
                    logging.warning(f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {query}")
        except ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ: {e}")

    return {}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ —Ñ–∏–ª—å–º–µ
def format_movie_response(movie_data: dict) -> str:
    title = movie_data.get("Title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = movie_data.get("Year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    genre = movie_data.get("Genre", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    director = movie_data.get("Director", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    actors = movie_data.get("Actors", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    rating = movie_data.get("imdbRating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
    plot = movie_data.get("Plot", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    awards = movie_data.get("Awards", "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥")
    runtime = movie_data.get("Runtime", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    link = f"https://www.imdb.com/title/{movie_data.get('imdbID', '')}"

    return (
        f"üé¨ *{title}* ({year})\n"
        f"üìÇ –ñ–∞–Ω—Ä: {genre}\n"
        f"üé• –†–µ–∂–∏—Å—Å—ë—Ä: {director}\n"
        f"üé≠ –ê–∫—Ç—ë—Ä—ã: {actors}\n"
        f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {runtime}\n"
        f"üìä –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating}\n"
        f"üèÜ –ù–∞–≥—Ä–∞–¥—ã: {awards}\n"
        f"\nüìú –°—é–∂–µ—Ç: {plot}\n"
        f"\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ IMDb]({link})"
    )

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–í–æ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –ø–æ–∏—Å–∫–æ–≤\n"
        "/random - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª\n"
        "/search <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/clearhistory - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞\n"
        "/quote - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –æ –∫–∏–Ω–æ\n"
    )
    await message.reply(help_text)

@dp.message(Command("history"))
async def cmd_history(message: types.Message):
    user_id = message.from_user.id
    history = await db.get_search_history(user_id)
    if history:
        history_text = "\n".join([f"{i + 1}. {query}" for i, query in enumerate(history)])
        await message.reply(f"–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∏—Å–∫–æ–≤:\n{history_text}")
    else:
        await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    count = await db.get_user_stats(user_id)
    await message.reply(f"–í—ã –∏—Å–∫–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {count} —Ñ–∏–ª—å–º–∞—Ö –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞—Ö.")

@dp.message(Command("random"))
async def cmd_random(message: types.Message):
    random_movies = ["The Shawshank Redemption", "The Godfather", "The Dark Knight", "Forrest Gump", "Inception"]
    random_movie = random.choice(random_movies)
    movie_data = await fetch_movie_data(random_movie)
    
    if movie_data:
        response_text = format_movie_response(movie_data)
        poster = movie_data.get("Poster", "")
        if poster and poster != "N/A":
            await message.reply_photo(poster, caption=response_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply(response_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª—É—á–∞–π–Ω–æ–º —Ñ–∏–ª—å–º–µ.")

@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    query = message.text[8:].strip()
    if not query:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞.")
        return

    movie_data = await fetch_movie_data(query)
    if movie_data:
        response_text = format_movie_response(movie_data)
        poster = movie_data.get("Poster", "")
        await db.save_search_history(message.from_user.id, query)

        if poster and poster != "N/A":
            await message.reply_photo(poster, caption=response_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply(response_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

@dp.message(Command("clearhistory"))
async def cmd_clearhistory(message: types.Message):
    user_id = message.from_user.id
    await db.clear_search_history(user_id)
    await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.")

@dp.message(Command("quote"))
async def cmd_quote(message: types.Message):
    quotes = [
        "¬´–ì–æ–ª–ª–∏–≤—É–¥ ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–Ω–∏ –ø—Ä–æ–¥–∞–¥—É—Ç —Ç–µ–±–µ —à–Ω—É—Ä–æ–∫ –æ—Ç –±–æ—Ç–∏–Ω–∫–∞ –∑–∞ 20 –¥–æ–ª–ª–∞—Ä–æ–≤, –∞ –ø–æ—Ç–æ–º —Å–∫–∞–∂—É—Ç, —á—Ç–æ –æ–Ω —Å—Ç–æ–∏–ª 100 –¥–æ–ª–ª–∞—Ä–æ–≤.¬ª ‚Äî –£–æ—Ä—Ä–µ–Ω –ë–∏—Ç—Ç–∏",
        "¬´–§–∏–ª—å–º ‚Äî —ç—Ç–æ –∂–∏–∑–Ω—å —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º.¬ª ‚Äî –ê–ª—å—Ñ—Ä–µ–¥ –•–∏—á–∫–æ–∫",
        "¬´–ö–∏–Ω–æ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–¥—è–º –ø–µ—Ä–µ–∂–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ.¬ª ‚Äî –§—Ä–∞–Ω—Å—É–∞ –¢—Ä—é—Ñ—Ñ–æ",
        "¬´–õ—É—á—à–µ –±—ã —è —Å–¥–µ–ª–∞–ª –≤—Å—ë –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç. –ù–æ —è –±—ã–ª —Å–ª–∏—à–∫–æ–º –∑–∞–Ω—è—Ç —Ç–µ–º, —á—Ç–æ–±—ã —Å–Ω–∏–º–∞—Ç—å.¬ª ‚Äî –û—Ä—Å–æ–Ω –£—ç–ª–ª—Å"
    ]
    quote = random.choice(quotes)
    await message.reply(f"–¶–∏—Ç–∞—Ç–∞: {quote}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def error_handler(update: types.Update, exception: Exception):
    logging.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É: {exception}")
    if hasattr(update, 'message'):
        await update.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
